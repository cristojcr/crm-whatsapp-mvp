// src/services/telegram-processor.js
const axios = require('axios');
const supabaseAdmin = require('../config/supabaseAdmin');

class TelegramProcessor {
    constructor() {
        // Configura√ß√£o din√¢mica - busca por usu√°rio
    }

    // Buscar configura√ß√£o do bot por usu√°rio
    async getUserBotConfig(userId) {
        const { data: channel, error } = await supabaseAdmin
            .from('user_channels')
            .select('channel_config')
            .eq('user_id', userId)
            .eq('channel_type', 'telegram')
            .eq('is_active', true)
            .single();

        if (error) throw new Error('Bot Telegram n√£o configurado para este usu√°rio');
        
        return channel.channel_config;
    }

    // Processar updates do Telegram (agora multi-tenant)
    async processUpdate(update, userId) {
        try {
            if (update.message) {
                return await this.processMessage(update.message, userId);
            } else if (update.callback_query) {
                return await this.processCallbackQuery(update.callback_query, userId);
            }
            return null;
        } catch (error) {
            console.error('Erro processando update Telegram:', error);
            throw error;
        }
    }

    // Processar mensagens (adaptado para multi-tenant)
    async processMessage(message, userId) {
        const { from, text, photo, video, audio, voice, document, chat } = message;
        
        // Buscar configura√ß√£o do bot do usu√°rio
        const botConfig = await this.getUserBotConfig(userId);
        
        // Buscar ou criar contato
        const contact = await this.findOrCreateContact(from, userId);
        
        // Buscar ou criar conversa
        const conversation = await this.findOrCreateConversation(contact.id, userId, 'telegram');
        
        // üÜï PROCESSAMENTO COM IA
        if (text && text.trim()) {
            console.log('üß† Processando mensagem com IA:', text);
            
            // Analisar com IA
            const intentionAnalyzer = require('./intention-analyzer');
            const analysis = await intentionAnalyzer.analyzeWithProfessionalPreference(text, contact.id, userId);
            
            console.log('‚úÖ An√°lise IA:', analysis);
            
            // Processar baseado na inten√ß√£o
            let responseText = '';
            if (analysis.intention === 'scheduling') {
                // üÜï NOVO FLUXO: Buscar profissionais primeiro
                const professionals = await this.getAvailableProfessionals(userId);
                
                if (professionals.length === 0) {
                    responseText = "‚ùå *Ops!* Nenhum profissional est√° dispon√≠vel no momento.\n\nTente novamente mais tarde ou entre em contato diretamente.";
                } else if (professionals.length === 1) {
                    // üéØ S√≥ 1 profissional: agendar direto
                    responseText = await this.handleSchedulingIntent(analysis, contact, userId, professionals[0]);
                } else {
                    // üéØ M√∫ltiplos profissionais: perguntar escolha
                    responseText = this.formatProfessionalsList(professionals);
                    
                    // üíæ Salvar estado do agendamento pendente
                    await this.savePendingAppointment(contact.id, userId, analysis, professionals);
                }
            } else if (await this.isProfessionalSelection(text, contact.id, userId)) {
                // üÜï FASE 3: Usu√°rio est√° escolhendo profissional
                responseText = await this.handleProfessionalSelection(text, contact.id, userId);
            } else {
                responseText = await this.handleGeneralResponse(analysis, text);
            }
            
            // üí¨ Enviar resposta (COMENTADO PARA TESTE)
            // await this.sendMessage(userId, chat.id, responseText);
            // ‚úÖ ENVIAR MENSAGEM REAL
            try {
                const botConfig = await this.getUserBotConfig(userId);
                const apiUrl = `https://api.telegram.org/bot${botConfig.bot_token}/sendMessage`;
                
                await fetch(apiUrl, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        chat_id: message.chat.id,
                        text: responseText,
                        parse_mode: 'HTML'
                    })
                });
    
    console.log('‚úÖ Mensagem enviada via Telegram!');
} catch (error) {
    console.error('‚ùå Erro enviando mensagem:', error);
}
            
            // Salvar resposta da IA
            await this.saveMessage({
                conversation_id: conversation.id,
                content: responseText,
                message_type: 'text',
                sender_type: 'assistant',
                channel_type: 'telegram',
                channel_message_id: `ai_${Date.now()}`,
                metadata: { ai_analysis: analysis }
            });
        }
        
        // Salvar mensagem original
        const savedMessage = await this.saveMessage({
            conversation_id: conversation.id,
            content: text || '[M√≠dia]',
            message_type: text ? 'text' : 'media',
            sender_type: 'contact',
            channel_type: 'telegram',
            channel_message_id: message.message_id?.toString() || `telegram_${Date.now()}`,
            metadata: { telegram_data: message }
        });

        return savedMessage;
    }

    // Buscar ou criar contato (adaptado para multi-tenant)
    async findOrCreateContact(from, userId) {
        console.log('üî• VERS√ÉO NOVA DO C√ìDIGO - DEBUG from:', JSON.stringify(from));
        
        let { data: contact, error } = await supabaseAdmin
            .from('contacts')
            .select('*')
            .eq('telegram_id', from.id)
            .eq('user_id', userId)
            .single();

        if (error && error.code === 'PGRST116') {
            const name = from.first_name + (from.last_name ? ` ${from.last_name}` : '');
            
            // SUPER DEFENSIVO - GARANTIR QUE NUNCA SER√Å NULL
            let phone = 'telegram_default'; // VALOR PADR√ÉO
            
            if (from.username) {
                phone = `@${from.username}`;
            } else if (from.id) {
                phone = `telegram_${from.id}`;
            }
            
            console.log('üî• PHONE SER√Å:', phone);
            
            const { data: newContact, error: createError } = await supabaseAdmin
                .from('contacts')
                .insert({
                    name: name,
                    phone: phone, // GARANTIDO QUE N√ÉO √â NULL
                    telegram_id: from.id,
                    user_id: userId,
                    status: 'new'
                })
                .select()
                .single();

            if (createError) throw createError;
            contact = newContact;
        } else if (error) {
            throw error;
        }

        return contact;
    }

    // Buscar ou criar conversa (adaptado para multi-tenant)
    async findOrCreateConversation(contactId, userId, channelType) {
        let { data: conversation, error } = await supabaseAdmin
            .from('conversations')
            .select('*')
            .eq('contact_id', contactId)
            .eq('channel_type', channelType)
            .eq('user_id', userId) // Filtrar por usu√°rio
            .single();

        if (error && error.code === 'PGRST116') {
            // Conversa n√£o existe, criar nova
            const { data: newConversation, error: createError } = await supabaseAdmin
                .from('conversations')
                .insert({
                    contact_id: contactId,
                    channel_type: channelType,
                    status: 'active',
                    user_id: userId // Associar ao usu√°rio
                })
                .select()
                .single();

            if (createError) throw createError;
            conversation = newConversation;
        } else if (error) {
            throw error;
        }

        return conversation;
    }

    // Salvar mensagem
    async saveMessage(messageData) {
        const { data: message, error } = await supabaseAdmin
            .from('messages')
            .insert(messageData)
            .select()
            .single();

        if (error) throw error;
        return message;
    }

    // Obter URL do arquivo (usando token do usu√°rio)
    async getFileUrl(fileId, botToken) {
        try {
            const response = await axios.get(`https://api.telegram.org/bot${botToken}/getFile?file_id=${fileId}`);
            const filePath = response.data.result.file_path;
            return `https://api.telegram.org/file/bot${botToken}/${filePath}`;
        } catch (error) {
            console.error('Erro obtendo URL do arquivo:', error);
            return null;
        }
    }

    // Enviar mensagem via Telegram (usando config do usu√°rio)
    async sendMessage(userId, chatId, message, options = {}) {
        try {
            const botConfig = await this.getUserBotConfig(userId);
            const apiUrl = `https://api.telegram.org/bot${botConfig.bot_token}`;
            
            const payload = {
                chat_id: chatId,
                text: message,
                ...options
            };

            const response = await axios.post(
                `${apiUrl}/sendMessage`,
                payload,
                {
                    headers: {
                        'Content-Type': 'application/json'
                    }
                }
            );

            return response.data;
        } catch (error) {
            console.error('Erro enviando mensagem Telegram:', error);
            throw error;
        }
    }

    // Configurar webhook (usando token do usu√°rio)
    async setWebhook(userId, webhookUrl) {
        try {
            const botConfig = await this.getUserBotConfig(userId);
            const apiUrl = `https://api.telegram.org/bot${botConfig.bot_token}`;
            
            const response = await axios.post(
                `${apiUrl}/setWebhook`,
                {
                    url: webhookUrl,
                    allowed_updates: ['message', 'callback_query']
                }
            );

            return response.data;
        } catch (error) {
            console.error('Erro configurando webhook Telegram:', error);
            throw error;
        }
    }

    // Processar callback queries (bot√µes inline)
    async processCallbackQuery(callbackQuery, userId) {
        const { from, data, message } = callbackQuery;
        const botConfig = await this.getUserBotConfig(userId);
        const apiUrl = `https://api.telegram.org/bot${botConfig.bot_token}`;
        
        // Responder ao callback
        await axios.post(`${apiUrl}/answerCallbackQuery`, {
            callback_query_id: callbackQuery.id,
            text: 'Processado!'
        });

        return { processed: true, data };
    }
    // Processar inten√ß√£o de agendamento com IA + Google Calendar
async handleSchedulingIntent(analysis, contact, userId, selectedProfessional = null) {
    try {
        console.log('üóìÔ∏è Iniciando agendamento escal√°vel...');
        console.log('üë§ Profissional selecionado:', selectedProfessional?.name || 'Autom√°tico');
        
        if (!selectedProfessional || !selectedProfessional.id) {
            return "‚ùå *Ops!* Erro na sele√ß√£o do profissional. Tente novamente.";
        }

        // üîç BUSCAR DADOS DO GOOGLE CALENDAR DO PROFISSIONAL SELECIONADO
        const { data: professionalCalendar, error: calendarError } = await supabaseAdmin
            .from('professionals')
            .select('google_calendar_email, google_calendar_id, google_access_token, google_refresh_token, calendar_connected')
            .eq('id', selectedProfessional.id)
            .single();

        if (calendarError || !professionalCalendar) {
            console.error('‚ùå Erro buscando dados do profissional:', calendarError);
            return "‚ùå *Ops!* Erro ao acessar dados do profissional. Tente novamente.";
        }

        // ‚úÖ VERIFICAR SE PROFISSIONAL TEM GOOGLE CALENDAR CONECTADO
        if (!professionalCalendar.calendar_connected || !professionalCalendar.google_calendar_email) {
            console.log('‚ùå Profissional sem Google Calendar:', professionalCalendar);
            return `‚ùå *Ops!* O profissional **${selectedProfessional.name}** ainda n√£o conectou o Google Calendar.

üìû *Entre em contato diretamente para agendar:*
üë®‚Äç‚öïÔ∏è **${selectedProfessional.name}**
${selectedProfessional.specialty ? `üéØ **Especialidade:** ${selectedProfessional.specialty}` : ''}

‚öôÔ∏è *Administrador: Configure o Google Calendar deste profissional no dashboard.*`;
        }

        console.log('‚úÖ Calend√°rio do profissional encontrado:', professionalCalendar.google_calendar_email);

        // üìÖ EXTRAIR DATA/HORA da an√°lise IA
        const { dateTime } = analysis;
        if (!dateTime || (!dateTime.suggestedDate && !dateTime.suggestedTime)) {
            return "‚ùå N√£o consegui identificar a data e hora desejada. Por favor, informe quando gostaria de agendar.";
        }

        // üïê PROCESSAR DATA E HORA
        let appointmentDate = new Date();
        
        // Data sugerida pela IA
        if (dateTime.suggestedDate) {
            appointmentDate = new Date(dateTime.suggestedDate);
        }
        
        // Hora sugerida pela IA
        if (dateTime.suggestedTime) {
            const [hours, minutes] = dateTime.suggestedTime.split(':');
            appointmentDate.setHours(parseInt(hours), parseInt(minutes), 0, 0);
        }

        // üìù CRIAR EVENTO NO GOOGLE CALENDAR DO PROFISSIONAL
        const eventTitle = `Consulta - ${contact.name || contact.phone}`;
        const eventDescription = `üë§ Paciente: ${contact.name || 'Cliente'}
üìû Telefone: ${contact.phone}

üë®‚Äç‚öïÔ∏è Profissional: ${selectedProfessional.name}
${selectedProfessional.specialty ? `üéØ Especialidade: ${selectedProfessional.specialty}` : ''}

ü§ñ Agendamento via IA WhatsApp CRM
‚è∞ Agendado em: ${new Date().toLocaleString('pt-BR')}`;

        // üåê CHAMAR API DO GOOGLE CALENDAR
        console.log('üì° Criando evento no Google Calendar...');
        // ‚úÖ SUBSTITUIR por chamada para sua API existente:
        const startDateTime = appointmentDate.toISOString();
        const endDateTime = new Date(appointmentDate.getTime() + 60 * 60 * 1000).toISOString(); // +1 hora

        const response = await fetch(`http://localhost:3001/api/calendar/create/${selectedProfessional.id}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
                // ‚úÖ SEM Authorization - chamada interna
            },
            body: JSON.stringify({
                title: eventTitle,
                description: eventDescription,
                startDateTime: startDateTime,
                endDateTime: endDateTime,
                attendees: []
            })
        });

        const eventResult = await response.json();


        if (!eventResult.success) {
            console.error('‚ùå Erro criando evento:', eventResult.error);
            return "‚ùå *Ops!* N√£o consegui confirmar seu agendamento no momento. üòî\n\nTente novamente em alguns minutos ou entre em contato diretamente.";
        }

        console.log('‚úÖ Evento criado com sucesso:', eventResult.eventId);

        // üíæ SALVAR AGENDAMENTO NO BANCO
        const { error: appointmentError } = await supabaseAdmin
            .from('appointments')
            .insert({
                user_id: userId,
                contact_id: contact.id,
                professional_id: selectedProfessional.id,
                scheduled_at: appointmentDate.toISOString(),
                status: 'confirmed',
                google_event_id: eventResult.eventId,
                title: eventTitle,
                description: eventDescription,
                created_via: 'telegram_ai',
                created_at: new Date().toISOString()
            });

        if (appointmentError) {
            console.error('‚ùå Erro salvando agendamento:', appointmentError);
        } else {
            console.log('‚úÖ Agendamento salvo no banco');
        }

        // üéâ MENSAGEM DE SUCESSO
        const successMessage = `‚úÖ *Agendamento confirmado!*

üë®‚Äç‚öïÔ∏è *Profissional:* ${selectedProfessional.name}
${selectedProfessional.specialty ? `üéØ *Especialidade:* ${selectedProfessional.specialty}` : ''}
üìÖ *Data:* ${appointmentDate.toLocaleDateString('pt-BR')}
üïê *Hor√°rio:* ${appointmentDate.toLocaleTimeString('pt-BR', { hour: '2-digit', minute: '2-digit' })}

üì± *Voc√™ receber√° lembretes autom√°ticos.*
üìù *O evento foi adicionado ao calend√°rio do profissional.*

Em caso de d√∫vidas, entre em contato! üòä`;

        return successMessage;

    } catch (error) {
        console.error('‚ùå Erro no agendamento escal√°vel:', error);
        return "‚ùå *Ops!* N√£o consegui confirmar seu agendamento no momento. üòî\n\nTente novamente em alguns minutos ou entre em contato diretamente.";
    }
}

    // üìÖ PROCESSAR AGENDAMENTO
    async processSchedulingRequest(analysis, contact, userId) {
        try {
            // Buscar profissionais dispon√≠veis
            const { data: professionals } = await supabaseAdmin
                .from('professionals')
                .select('*')
                .eq('user_id', userId)
                .eq('calendar_connected', true);
            
            if (!professionals || professionals.length === 0) {
                return "No momento n√£o temos profissionais com agenda dispon√≠vel. Entre em contato para mais informa√ß√µes.";
            }
            
            // Se prefer√™ncia espec√≠fica, tentar encontrar profissional
            if (analysis.professional_preference?.from_message?.hasPreference) {
                const pref = analysis.professional_preference.from_message;
                
                if (pref.type === 'specific_professional') {
                    const prof = professionals.find(p => 
                        p.name.toLowerCase().includes(pref.professionalName.toLowerCase())
                    );
                    if (prof) {
                        return await this.createCalendarEvent(prof, contact, analysis);
                    }
                }
            }
            
            // Usar primeiro profissional dispon√≠vel
            const selectedProfessional = professionals[0];
            return await this.createCalendarEvent(selectedProfessional, contact, analysis);
            
        } catch (error) {
            console.error('‚ùå Erro agendamento:', error);
            return "Erro interno. Tente novamente em alguns momentos.";
        }
    }

    // üìÖ CRIAR EVENTO NO GOOGLE CALENDAR
async createCalendarEvent(professional, contact, analysis) {
    try {
        const { google } = require('googleapis');
        
        // Configurar OAuth2
        const oauth2Client = new google.auth.OAuth2(
            process.env.GOOGLE_CLIENT_ID,
            process.env.GOOGLE_CLIENT_SECRET,
            process.env.GOOGLE_REDIRECT_URI
        );
        
        oauth2Client.setCredentials({
            access_token: professional.google_access_token,
            refresh_token: professional.google_refresh_token
        });
        
        const calendar = google.calendar({ version: 'v3', auth: oauth2Client });
        
        // üîß USAR HOR√ÅRIO REAL DA IA (n√£o hardcoded)
        const suggestedDate = analysis.dateTime?.suggestedDate;
        const suggestedTime = analysis.dateTime?.suggestedTime;
        
        if (!suggestedDate || !suggestedTime) {
            throw new Error('Data/hora n√£o detectada na mensagem');
        }
        
        // üîß CRIAR DATETIME CORRETO (sem .toISOString())
        const eventDateTime = `${suggestedDate}T${suggestedTime}:00-03:00`;
        
        // Calcular fim (1 hora depois)
        const startDate = new Date(`${suggestedDate}T${suggestedTime}:00`);
        const endDate = new Date(startDate.getTime() + (60 * 60 * 1000));
        const endDateTime = `${suggestedDate}T${endDate.getHours().toString().padStart(2, '0')}:${endDate.getMinutes().toString().padStart(2, '0')}:00`;
        
        console.log('üìÖ Agendando para:', eventDateTime, 'at√©', endDateTime);
        
        // ‚úÖ CORRIGIDO (com logs e timezone):
        // üîß USAR HOR√ÅRIO REAL DA IA
        const suggestedDate = analysis.dateTime?.suggestedDate;
        const suggestedTime = analysis.dateTime?.suggestedTime;

        console.log('üïê Timezone do servidor:', new Date().toISOString());
        console.log('üìä Data/hora da IA:', suggestedDate, suggestedTime);

        if (!suggestedDate || !suggestedTime) {
            throw new Error('Data/hora n√£o detectada na mensagem');
        }

        // üîß CRIAR DATETIME COM TIMEZONE BRAS√çLIA
        const eventDateTime = `${suggestedDate}T${suggestedTime}:00-03:00`;

        // Calcular fim (1 hora depois)  
        const startDate = new Date(`${suggestedDate}T${suggestedTime}:00-03:00`);
        const endDate = new Date(startDate.getTime() + (60 * 60 * 1000));
        const endTime = `${endDate.getHours().toString().padStart(2, '0')}:${endDate.getMinutes().toString().padStart(2, '0')}`;
        const endDateTime = `${suggestedDate}T${endTime}:00-03:00`;

        console.log('üìÖ Agendando para:', eventDateTime, 'at√©', endDateTime);

        const event = {
            summary: `Consulta - ${contact.name}`,
            description: `Agendamento via Telegram\nContato: ${contact.name}`,
            start: {
                dateTime: eventDateTime,  // ‚úÖ COM -03:00
                timeZone: 'America/Sao_Paulo'
            },
            end: {
                dateTime: endDateTime,    // ‚úÖ COM -03:00
                timeZone: 'America/Sao_Paulo'
            },
            attendees: [
                { email: professional.google_calendar_email }
            ]
        };
        
        const response = await calendar.events.insert({
            calendarId: 'primary',
            resource: event
        });
        
        console.log('‚úÖ Evento criado:', response.data.id);
        
        return `‚úÖ Agendamento confirmado!

üìÖ Data: ${new Date(suggestedDate).toLocaleDateString('pt-BR')}
üïê Hor√°rio: ${suggestedTime}
üë®‚Äç‚öïÔ∏è Profissional: ${professional.name}
üìß Contato: ${professional.email}

Voc√™ receber√° uma confirma√ß√£o por email. At√© l√°! üòä`;
        
    } catch (error) {
        console.error('‚ùå Erro criando evento:', error);
        return "Agendamento processado! Entraremos em contato para confirmar hor√°rio.";
    }
}

    // üîç CONSULTAR DISPONIBILIDADE
    async processAvailabilityQuery(professional_preference, userId) {
        try {
            const { data: professionals } = await supabaseAdmin
                .from('professionals')
                .select('name, specialty')
                .eq('user_id', userId)
                .eq('calendar_connected', true);
            
            if (!professionals || professionals.length === 0) {
                return "No momento n√£o temos agenda dispon√≠vel. Entre em contato para mais informa√ß√µes.";
            }
            
            let response = "üìÖ Profissionais dispon√≠veis:\n\n";
            professionals.forEach((prof, index) => {
                response += `${index + 1}. ${prof.name}`;
                if (prof.specialty) response += ` - ${prof.specialty}`;
                response += "\n";
            });
            
            response += "\nQual profissional voc√™ prefere? Ou posso agendar com o pr√≥ximo dispon√≠vel! üòä";
            
            return response;
            
        } catch (error) {
            console.error('‚ùå Erro consultando disponibilidade:', error);
            return "No momento temos hor√°rios dispon√≠veis! Entre em contato para agendar. üìû";
        }
    }

    // ‚ùå PROCESSAR CANCELAMENTO
    async processCancellationRequest(contact, userId) {
        // Por enquanto, resposta padr√£o
        return `Entendi que voc√™ quer cancelar um agendamento.

    Para cancelar, preciso de mais informa√ß√µes:
    - Data do agendamento
    - Nome do profissional

    Ou entre em contato conosco diretamente! üìû`;
    }

    // üîÑ PROCESSAR REAGENDAMENTO
    async processRescheduleRequest(contact, userId) {
        return `Para reagendar sua consulta, preciso saber:

    - Data atual do agendamento
    - Nova data/hor√°rio preferido

    Ou entre em contato para ajudarmos! üìû`;
    }

    // üí¨ RESPOSTA GERAL (n√£o √© agendamento)
    async handleGeneralResponse(analysis, originalText) {
        const responses = {
            greeting: "Ol√°! üòä Como posso ajudar voc√™ hoje? \n\nPosso ajudar com:\n‚Ä¢ Agendamentos\n‚Ä¢ Informa√ß√µes sobre servi√ßos\n‚Ä¢ Reagendamentos",
            information: "Estou aqui para ajudar! Sobre o que voc√™ gostaria de saber?",
            pricing: "Para informa√ß√µes sobre valores, entre em contato conosco! Temos v√°rias op√ß√µes de tratamento.",
            support: "Estou aqui para ajudar! Qual √© sua d√∫vida?"
        };
        
        return responses[analysis.intention] || "Obrigado pela mensagem! Como posso ajudar voc√™? üòä";
    }

    // üÜï Buscar profissionais com Google Calendar ativo
    async getAvailableProfessionals(userId) {
        try {
            console.log('üîç DEBUG: Buscando profissionais para company_id:', userId);
            
            const { data: professionals, error } = await supabaseAdmin
                .from('professionals')
                .select(`
                    id,
                    name,
                    specialty,
                    calendar_connected,
                    google_calendar_id,
                    is_active,
                    company_id
                `)
                .eq('company_id', userId)  // ‚úÖ MUDAN√áA: company_id em vez de user_id
                .eq('calendar_connected', true)
                .eq('is_active', true);

            console.log('üîç DEBUG: Query result:', { professionals, error });
            console.log(`‚úÖ Encontrados ${professionals?.length || 0} profissionais ativos`);

            if (error) {
                console.error('‚ùå Erro buscando profissionais:', error);
                return [];
            }

            return professionals || [];
        } catch (error) {
            console.error('‚ùå Erro na busca:', error);
            return [];
        }
    }

// üÜï 2. Salvar agendamento pendente
async savePendingAppointment(contactId, userId, analysis, professionals) {
    try {
        console.log('üíæ Salvando agendamento pendente...');
        
        const { error } = await supabaseAdmin
            .from('pending_appointments')
            .insert({
                contact_id: contactId,
                user_id: userId,
                message_content: analysis.originalMessage || '',
                analysis: JSON.stringify(analysis), // ‚Üê üÜï CAMPO FALTANDO!
                professionals: JSON.stringify(professionals),
                expires_at: new Date(Date.now() + 10 * 60 * 1000).toISOString(), // 10 min
                created_at: new Date().toISOString()
            });

        if (error) {
            console.error('‚ùå Erro salvando agendamento pendente:', error);
        } else {
            console.log('‚úÖ Agendamento pendente salvo com sucesso!');
        }
    } catch (error) {
        console.error('‚ùå Erro salvando pendente:', error);
    }
}

// üÜï 3. Verificar se usu√°rio est√° escolhendo profissional
async isProfessionalSelection(text, contactId, userId) {
    try {
        console.log('üîç DEBUG isProfessionalSelection:');
        console.log('  Text:', text);
        console.log('  ContactId:', contactId);
        console.log('  UserId:', userId);
        
        // Verificar se existe agendamento pendente
        const { data: pending, error } = await supabaseAdmin
            .from('pending_appointments')
            .select('*')
            .eq('contact_id', contactId)
            .eq('user_id', userId)
            .gt('expires_at', new Date().toISOString())
            .order('created_at', { ascending: false })
            .limit(1)
            .single();

        console.log('üìä Busca pending_appointments:');
        console.log('  Data:', pending);
        console.log('  Error:', error);

        if (error || !pending) {
            console.log('‚ùå Nenhum agendamento pendente encontrado');
            return false;
        }

        console.log('‚úÖ Agendamento pendente encontrado!');

        // Verificar se texto parece ser sele√ß√£o (n√∫mero ou nome)
        const cleanText = text.trim().toLowerCase();
        console.log('üßπ Texto limpo:', cleanText);
        
        const isNumber = /^[1-9]$/.test(cleanText);
        console.log('üî¢ √â n√∫mero?', isNumber);
        
        const professionals = JSON.parse(pending.professionals);
        console.log('üë• Profissionais dispon√≠veis:', professionals.length);
        
        const isName = professionals.some(prof => 
            prof.name.toLowerCase().includes(cleanText) || 
            cleanText.includes(prof.name.toLowerCase())
        );
        console.log('üìù √â nome?', isName);

        const result = isNumber || isName;
        console.log('üéØ Resultado final isProfessionalSelection:', result);
        
        return result;
    } catch (error) {
        console.error('‚ùå Erro verificando sele√ß√£o:', error);
        return false;
    }
}

// üÜï 4. Processar sele√ß√£o do profissional
async handleProfessionalSelection(text, contactId, userId) {
    try {
        // Buscar agendamento pendente
        const { data: pending, error } = await supabaseAdmin
            .from('pending_appointments')
            .select('*')
            .eq('contact_id', contactId)
            .eq('user_id', userId)
            .gt('expires_at', new Date().toISOString())
            .order('created_at', { ascending: false })
            .limit(1)
            .single();

        if (error || !pending) {
            return "‚ùå N√£o encontrei nenhum agendamento pendente. Por favor, solicite novamente.";
        }

        const professionals = JSON.parse(pending.professionals);
        const cleanText = text.trim().toLowerCase();
        let selectedProfessional = null;

        // Tentar encontrar por n√∫mero
        if (/^[1-9]$/.test(cleanText)) {
            const index = parseInt(cleanText) - 1;
            if (index >= 0 && index < professionals.length) {
                selectedProfessional = professionals[index];
            }
        }

        // Se n√£o encontrou por n√∫mero, tentar por nome
        if (!selectedProfessional) {
            selectedProfessional = professionals.find(prof => 
                prof.name.toLowerCase().includes(cleanText) || 
                cleanText.includes(prof.name.toLowerCase())
            );
        }

        if (!selectedProfessional) {
            return `‚ùå N√£o consegui identificar o profissional "${text}". Por favor, responda com o n√∫mero (1, 2, 3...) ou nome completo.`;
        }

        // üÜï USAR A AN√ÅLISE ORIGINAL DO BANCO, N√ÉO A ATUAL!
        const originalAnalysis = JSON.parse(pending.analysis);
        
        console.log('üóìÔ∏è Processando agendamento com IA...');
        console.log('üìä An√°lise original:', originalAnalysis);
        console.log('üë§ Profissional selecionado:', selectedProfessional.name);

        const contact = await this.getContactById(contactId);
        const appointmentResult = await this.handleSchedulingIntent(originalAnalysis, contact, userId, selectedProfessional);

        // üßπ Limpar agendamento pendente
        await supabaseAdmin
            .from('pending_appointments')
            .delete()
            .eq('contact_id', contactId)
            .eq('user_id', userId);

        return appointmentResult;

    } catch (error) {
        console.error('‚ùå Erro processando sele√ß√£o:', error);
        return "‚ùå Erro processando sua escolha. Tente novamente.";
    }
}

// üÜï 1. Formatar lista de profissionais para o usu√°rio
formatProfessionalsList(professionals) {
    if (!professionals || professionals.length === 0) {
        return "‚ùå Nenhum profissional dispon√≠vel no momento.";
    }

    let message = "üë®‚Äç‚öïÔ∏è *Profissionais dispon√≠veis:*\n\n";
    
    professionals.forEach((prof, index) => {
        const number = index + 1;
        const specialty = prof.specialty ? ` - ${prof.specialty}` : '';
        message += `${number}. *${prof.name}*${specialty}\n`;
    });
    
    message += "\nüì± *Responda com o n√∫mero ou nome do profissional de sua prefer√™ncia.*";
    
    return message;
}

// üÜï 5. Buscar contato por ID (helper)
async getContactById(contactId) {
    try {
        const { data: contact, error } = await supabaseAdmin
            .from('contacts')
            .select('*')
            .eq('id', contactId)
            .single();

        if (error) throw error;
        return contact;
    } catch (error) {
        console.error('‚ùå Erro buscando contato:', error);
        throw error;
    }
}



}

module.exports = TelegramProcessor;