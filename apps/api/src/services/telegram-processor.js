// src/services/telegram-processor.js
const axios = require('axios');
const supabaseAdmin = require('../config/supabaseAdmin');

class TelegramProcessor {
    constructor() {
        // Configura√ß√£o din√¢mica - busca por usu√°rio
    }

    // Buscar configura√ß√£o do bot por usu√°rio
    async getUserBotConfig(userId) {
        const { data: channel, error } = await supabaseAdmin
            .from('user_channels')
            .select('channel_config')
            .eq('user_id', userId)
            .eq('channel_type', 'telegram')
            .eq('is_active', true)
            .single();

        if (error) throw new Error('Bot Telegram n√£o configurado para este usu√°rio');
        
        return channel.channel_config;
    }

    // Processar updates do Telegram (agora multi-tenant)
    async processUpdate(update, userId) {
        try {
            if (update.message) {
                return await this.processMessage(update.message, userId);
            } else if (update.callback_query) {
                return await this.processCallbackQuery(update.callback_query, userId);
            }
            return null;
        } catch (error) {
            console.error('Erro processando update Telegram:', error);
            throw error;
        }
    }

    // Processar mensagens (adaptado para multi-tenant)
    async processMessage(message, userId) {
        const { from, text, photo, video, audio, voice, document, chat } = message;
        
        // Buscar configura√ß√£o do bot do usu√°rio
        const botConfig = await this.getUserBotConfig(userId);
        
        // Buscar ou criar contato
        const contact = await this.findOrCreateContact(from, userId);
        
        // Buscar ou criar conversa
        const conversation = await this.findOrCreateConversation(contact.id, userId, 'telegram');
        
        // üÜï PROCESSAMENTO COM IA
        if (text && text.trim()) {
            console.log('üß† Processando mensagem com IA:', text);
            
            // Analisar com IA
            const intentionAnalyzer = require('./intention-analyzer');
            const analysis = await intentionAnalyzer.analyzeWithProductsAndProfessionals(text, contact.id, userId);
            
            console.log('‚úÖ An√°lise IA:', analysis);
            
            // Processar baseado na inten√ß√£o
            let responseText = '';
            
            // ‚úÖ ETAPA 1: VERIFICAR SE O USU√ÅRIO EST√Å RESPONDENDO A UMA SELE√á√ÉO DE PRODUTO
            const pendingProductSelection = await this.checkPendingProductSelection(contact.id, userId);
            if (pendingProductSelection && this.isNumericSelection(text)) {
                responseText = await this.handleProductSelection(text, pendingProductSelection, contact, userId);
            
            // ‚úÖ ETAPA 2: VERIFICAR SE O USU√ÅRIO EST√Å RESPONDENDO A UMA SELE√á√ÉO DE PROFISSIONAL
            } else if (await this.isProfessionalSelection(text, contact.id, userId)) {
                responseText = await this.handleProfessionalSelection(text, contact.id, userId);

            // ‚úÖ ETAPA 3: SE N√ÉO FOR SELE√á√ÉO, VERIFICAR A INTEN√á√ÉO DA IA
            } else if (analysis.intention === 'scheduling') {
                
                // ‚úÖ NOVA L√ìGICA: PRIMEIRO, VERIFICAR SE A AN√ÅLISE RETORNOU PRODUTOS
                if (analysis.products && analysis.products.length > 0) {
                    if (analysis.products.length === 1) {
                        // Encontrou apenas 1 produto, vamos agendar diretamente
                        responseText = await this.processDirectScheduling(analysis.products[0], contact, userId, analysis);
                    } else {
                        // Encontrou m√∫ltiplos produtos, vamos mostrar as op√ß√µes
                        responseText = await this.showProductOptions(analysis.products, contact, userId, analysis);
                    }
                } else {
                    // SE N√ÉO ENCONTROU PRODUTOS, SEGUE O FLUXO ANTIGO DE PROFISSIONAIS
                    const professionals = await this.getAvailableProfessionals(userId);
                    
                    if (professionals.length === 0) {
                        responseText = "‚ùå *Ops!* Nenhum profissional est√° dispon√≠vel no momento.\n\nTente novamente mais tarde ou entre em contato diretamente.";
                    } else if (professionals.length === 1) {
                        responseText = await this.handleSchedulingIntent(analysis, contact, userId, professionals[0]);
                    } else {
                        responseText = this.formatProfessionalsList(professionals);
                        await this.savePendingAppointment(contact.id, userId, analysis, professionals);
                    }
                }

            } else if (analysis.intention === 'rescheduling') {
                responseText = await this.handleReschedulingIntent(analysis, contact, userId);
            } else if (analysis.intention === 'inquiry') {
                responseText = await this.handleInquiryIntent(analysis, contact, userId);
            } else if (analysis.intention === 'cancellation') {
                responseText = await this.handleCancellationIntent(analysis, contact, userId);
            } else {
                responseText = await this.handleGeneralResponse(analysis, text);
            }
            
            // ‚úÖ ENVIAR MENSAGEM REAL
            try {
                const botConfig = await this.getUserBotConfig(userId);
                const apiUrl = `https://api.telegram.org/bot${botConfig.bot_token}/sendMessage`;
                
                await fetch(apiUrl, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        chat_id: message.chat.id,
                        text: responseText,
                        parse_mode: 'HTML'
                    })
                });
    
                console.log('‚úÖ Mensagem enviada via Telegram!');
            } catch (error) {
                console.error('‚ùå Erro enviando mensagem:', error);
            }
            
            // Salvar resposta da IA
            await this.saveMessage({
                conversation_id: conversation.id,
                content: responseText,
                message_type: 'text',
                sender_type: 'assistant',
                channel_type: 'telegram',
                channel_message_id: `ai_${Date.now()}`,
                metadata: { ai_analysis: analysis }
            });
        }
        
        // Salvar mensagem original
        const savedMessage = await this.saveMessage({
            conversation_id: conversation.id,
            content: text || '[M√≠dia]',
            message_type: text ? 'text' : 'media',
            sender_type: 'contact',
            channel_type: 'telegram',
            channel_message_id: message.message_id?.toString() || `telegram_${Date.now()}`,
            metadata: { telegram_data: message }
        });

        return savedMessage;
    }

    // ‚úÖ CORRE√á√ÉO: Buscar ou criar contato (adaptado para multi-tenant)
    async findOrCreateContact(from, userId) {
        console.log('üî• VERS√ÉO CORRIGIDA - DEBUG from:', JSON.stringify(from));
        
        try {
            let { data: contact, error } = await supabaseAdmin
                .from('contacts')
                .select('*')
                .eq('telegram_id', from.id)
                .eq('user_id', userId)
                .single();

            if (error && error.code === 'PGRST116') {
                const name = from.first_name + (from.last_name ? ` ${from.last_name}` : '');
                
                // SUPER DEFENSIVO - GARANTIR QUE NUNCA SER√Å NULL
                let phone = 'telegram_default'; // VALOR PADR√ÉO
                
                if (from.username) {
                    phone = `@${from.username}`;
                } else if (from.id) {
                    phone = `telegram_${from.id}`;
                }
                
                console.log('üî• PHONE SER√Å:', phone);
                
                const { data: newContact, error: createError } = await supabaseAdmin
                    .from('contacts')
                    .insert({
                        name: name,
                        phone: phone, // GARANTIDO QUE N√ÉO √â NULL
                        telegram_id: from.id,
                        user_id: userId,
                        status: 'new'
                    })
                    .select()
                    .single();

                if (createError) {
                    console.error('‚ùå Erro criando contato:', createError);
                    throw createError;
                }
                contact = newContact;
            } else if (error) {
                console.error('‚ùå Erro buscando contato:', error);
                throw error;
            }

            return contact;
        } catch (error) {
            console.error('‚ùå Erro em findOrCreateContact:', error);
            throw error;
        }
    }

    // Buscar ou criar conversa (adaptado para multi-tenant)
    async findOrCreateConversation(contactId, userId, channelType) {
        let { data: conversation, error } = await supabaseAdmin
            .from('conversations')
            .select('*')
            .eq('contact_id', contactId)
            .eq('channel_type', channelType)
            .eq('user_id', userId) // Filtrar por usu√°rio
            .single();

        if (error && error.code === 'PGRST116') {
            // Conversa n√£o existe, criar nova
            const { data: newConversation, error: createError } = await supabaseAdmin
                .from('conversations')
                .insert({
                    contact_id: contactId,
                    channel_type: channelType,
                    status: 'active',
                    user_id: userId // Associar ao usu√°rio
                })
                .select()
                .single();

            if (createError) throw createError;
            conversation = newConversation;
        } else if (error) {
            throw error;
        }

        return conversation;
    }

    // Salvar mensagem
    async saveMessage(messageData) {
        const { data: message, error } = await supabaseAdmin
            .from('messages')
            .insert(messageData)
            .select()
            .single();

        if (error) throw error;
        return message;
    }

    // Obter URL do arquivo (usando token do usu√°rio)
    async getFileUrl(fileId, botToken) {
        try {
            const response = await axios.get(`https://api.telegram.org/bot${botToken}/getFile?file_id=${fileId}`);
            const filePath = response.data.result.file_path;
            return `https://api.telegram.org/file/bot${botToken}/${filePath}`;
        } catch (error) {
            console.error('Erro obtendo URL do arquivo:', error);
            return null;
        }
    }

    // Enviar mensagem via Telegram (usando config do usu√°rio)
    async sendMessage(userId, chatId, message, options = {}) {
        try {
            const botConfig = await this.getUserBotConfig(userId);
            const apiUrl = `https://api.telegram.org/bot${botConfig.bot_token}`;
            
            const payload = {
                chat_id: chatId,
                text: message,
                ...options
            };

            const response = await axios.post(
                `${apiUrl}/sendMessage`,
                payload,
                {
                    headers: {
                        'Content-Type': 'application/json'
                    }
                }
            );

            return response.data;
        } catch (error) {
            console.error('Erro enviando mensagem Telegram:', error);
            throw error;
        }
    }

    // Configurar webhook (usando token do usu√°rio)
    async setWebhook(userId, webhookUrl) {
        try {
            const botConfig = await this.getUserBotConfig(userId);
            const apiUrl = `https://api.telegram.org/bot${botConfig.bot_token}`;
            
            const response = await axios.post(
                `${apiUrl}/setWebhook`,
                {
                    url: webhookUrl,
                    allowed_updates: ['message', 'callback_query']
                }
            );

            return response.data;
        } catch (error) {
            console.error('Erro configurando webhook Telegram:', error);
            throw error;
        }
    }

    // Processar callback queries (bot√µes inline)
    async processCallbackQuery(callbackQuery, userId) {
        const { from, data, message } = callbackQuery;
        const botConfig = await this.getUserBotConfig(userId);
        const apiUrl = `https://api.telegram.org/bot${botConfig.bot_token}`;
        
        // Responder ao callback
        await axios.post(`${apiUrl}/answerCallbackQuery`, {
            callback_query_id: callbackQuery.id,
            text: 'Processado!'
        });

        return { processed: true, data };
    }

    // Processar inten√ß√£o de agendamento com IA + Google Calendar
    async handleSchedulingIntent(analysis, contact, userId, selectedProfessional = null) {
        try {
            console.log('üóìÔ∏è Iniciando agendamento escal√°vel...');
            console.log('üë§ Profissional selecionado:', selectedProfessional?.name || 'Autom√°tico');
            
            if (!selectedProfessional || !selectedProfessional.id) {
                return "‚ùå *Ops!* Erro na sele√ß√£o do profissional. Tente novamente.";
            }

            // üîç BUSCAR DADOS DO GOOGLE CALENDAR DO PROFISSIONAL SELECIONADO
            const { data: professionalCalendar, error: calendarError } = await supabaseAdmin
                .from('professionals')
                .select('google_calendar_email, google_calendar_id, google_access_token, google_refresh_token, calendar_connected')
                .eq('id', selectedProfessional.id)
                .single();

            if (calendarError || !professionalCalendar) {
                console.error('‚ùå Erro buscando dados do profissional:', calendarError);
                return "‚ùå *Ops!* Erro ao acessar dados do profissional. Tente novamente.";
            }

            // ‚úÖ VERIFICAR SE PROFISSIONAL TEM GOOGLE CALENDAR CONECTADO
            if (!professionalCalendar.calendar_connected || !professionalCalendar.google_calendar_email) {
                console.log('‚ùå Profissional sem Google Calendar:', professionalCalendar);
                return `‚ùå *Ops!* O profissional **${selectedProfessional.name}** ainda n√£o conectou o Google Calendar.

üìû *Entre em contato diretamente para agendar:*
üë®‚Äç‚öïÔ∏è **${selectedProfessional.name}**
${selectedProfessional.specialty ? `üéØ **Especialidade:** ${selectedProfessional.specialty}` : ''}

‚öôÔ∏è *Administrador: Configure o Google Calendar deste profissional no dashboard.*`;
            }

            console.log('‚úÖ Calend√°rio do profissional encontrado:', professionalCalendar.google_calendar_email);

            // üìÖ EXTRAIR DATA/HORA da an√°lise IA (compat√≠vel com ambas estruturas)
            const dateTimeInfo = analysis.extracted_info || analysis.dateTime || {};
            const extractedDate = dateTimeInfo.date || dateTimeInfo.suggestedDate;
            const extractedTime = dateTimeInfo.time || dateTimeInfo.suggestedTime;

            if (!extractedDate && !extractedTime) {
                return "‚ùå N√£o consegui identificar a data e hora desejada. Por favor, informe quando gostaria de agendar.";
            }

            console.log('üóìÔ∏è Data extra√≠da:', extractedDate);
            console.log('üïê Hora extra√≠da:', extractedTime);

            // üïê PROCESSAR DATA E HORA
            let appointmentDate = new Date();

            // Data sugerida pela IA
            if (extractedDate) {
                appointmentDate = new Date(extractedDate);
            }

            // Hora sugerida pela IA
            if (extractedTime) {
                const [hours, minutes] = extractedTime.split(':');
                appointmentDate.setHours(parseInt(hours), parseInt(minutes), 0, 0);
            }

            // üìù CRIAR EVENTO NO GOOGLE CALENDAR DO PROFISSIONAL
            const eventTitle = `Consulta - ${contact.name || contact.phone}`;
            const eventDescription = `üë§ Paciente: ${contact.name || 'Cliente'}
üìû Telefone: ${contact.phone}

üë®‚Äç‚öïÔ∏è Profissional: ${selectedProfessional.name}
${selectedProfessional.specialty ? `üéØ Especialidade: ${selectedProfessional.specialty}` : ''}

ü§ñ Agendamento via IA WhatsApp CRM
‚è∞ Agendado em: ${new Date().toLocaleString('pt-BR')}`;

            // üåê CHAMAR API DO GOOGLE CALENDAR
            console.log('üì° Criando evento no Google Calendar...');
            const startDateTime = appointmentDate.toISOString();
            const endDateTime = new Date(appointmentDate.getTime() + 60 * 60 * 1000).toISOString(); // +1 hora

            // üåê CHAMAR API DO GOOGLE CALENDAR
            const response = await fetch(`http://localhost:3001/api/calendar/create/${selectedProfessional.id}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                    // ‚úÖ SEM Authorization - chamada interna
                },
                body: JSON.stringify({
                    title: eventTitle,
                    description: eventDescription,
                    startDateTime: startDateTime,
                    endDateTime: endDateTime,
                    attendees: []
                })
            });

            const eventResult = await response.json();

            if (!eventResult.success) {
                console.error('‚ùå Erro criando evento:', eventResult.error);
                return "‚ùå *Ops!* N√£o consegui confirmar seu agendamento no momento. üòî\n\nTente novamente em alguns minutos ou entre em contato diretamente.";
            }

            console.log('‚úÖ Evento criado com sucesso:', eventResult.eventId);

            // üíæ SALVAR AGENDAMENTO NO BANCO
            const { error: appointmentError } = await supabaseAdmin
                .from('appointments')
                .insert({
                    user_id: userId,
                    contact_id: contact.id,
                    professional_id: selectedProfessional.id,
                    scheduled_at: appointmentDate.toISOString(),
                    status: 'confirmed',
                    google_event_id: eventResult.eventId,
                    title: eventTitle,
                    description: eventDescription,
                    created_via: 'telegram_ai',
                    created_at: new Date().toISOString()
                });

            if (appointmentError) {
                console.error('‚ùå Erro salvando agendamento:', appointmentError);
            } else {
                console.log('‚úÖ Agendamento salvo no banco');
            }

            // üéâ MENSAGEM DE SUCESSO
            const successMessage = `‚úÖ *Agendamento confirmado!*

üë®‚Äç‚öïÔ∏è *Profissional:* ${selectedProfessional.name}
${selectedProfessional.specialty ? `üéØ *Especialidade:* ${selectedProfessional.specialty}` : ''}
üìÖ *Data:* ${appointmentDate.toLocaleDateString('pt-BR')}
üïê *Hor√°rio:* ${appointmentDate.toLocaleTimeString('pt-BR', { hour: '2-digit', minute: '2-digit' })}

üì± *Voc√™ receber√° lembretes autom√°ticos.*
üìù *O evento foi adicionado ao calend√°rio do profissional.*

Em caso de d√∫vidas, entre em contato! üòä`;

            return successMessage;

        } catch (error) {
            console.error('‚ùå Erro no agendamento escal√°vel:', error);
            return "‚ùå *Ops!* N√£o consegui confirmar seu agendamento no momento. üòî\n\nTente novamente em alguns minutos ou entre em contato diretamente.";
        }
    }

    // üÜï Buscar profissionais com Google Calendar ativo
    async getAvailableProfessionals(userId) {
        try {
            console.log('üîç DEBUG: Buscando profissionais para company_id:', userId);
            
            const { data: professionals, error } = await supabaseAdmin
                .from('professionals')
                .select(`
                    id,
                    name,
                    specialty,
                    calendar_connected,
                    google_calendar_id,
                    is_active,
                    company_id
                `)
                .eq('company_id', userId)  // ‚úÖ MUDAN√áA: company_id em vez de user_id
                .eq('calendar_connected', true)
                .eq('is_active', true);

            console.log('üîç DEBUG: Query result:', { professionals, error });
            console.log(`‚úÖ Encontrados ${professionals?.length || 0} profissionais ativos`);

            if (error) {
                console.error('‚ùå Erro buscando profissionais:', error);
                return [];
            }

            return professionals || [];
        } catch (error) {
            console.error('‚ùå Erro na busca:', error);
            return [];
        }
    }

    // üÜï 2. Salvar agendamento pendente
    async savePendingAppointment(contactId, userId, analysis, professionals) {
        try {
            console.log('üíæ Salvando agendamento pendente...');
            
            const { error } = await supabaseAdmin
                .from('pending_appointments')
                .insert({
                    contact_id: contactId,
                    user_id: userId,
                    message_content: analysis.originalMessage || '',
                    analysis: JSON.stringify(analysis),
                    professionals: JSON.stringify(professionals),
                    expires_at: new Date(Date.now() + 10 * 60 * 1000).toISOString(), // 10 min
                    created_at: new Date().toISOString()
                });

            if (error) {
                console.error('‚ùå Erro salvando agendamento pendente:', error);
            } else {
                console.log('‚úÖ Agendamento pendente salvo com sucesso!');
            }
        } catch (error) {
            console.error('‚ùå Erro salvando pendente:', error);
        }
    }

    // üÜï 3. Verificar se usu√°rio est√° escolhendo profissional
    async isProfessionalSelection(text, contactId, userId) {
        try {
            console.log('üîç DEBUG isProfessionalSelection:');
            console.log('  Text:', text);
            console.log('  ContactId:', contactId);
            console.log('  UserId:', userId);
            
            // Verificar se existe agendamento pendente
            const { data: pending, error } = await supabaseAdmin
                .from('pending_appointments')
                .select('*')
                .eq('contact_id', contactId)
                .eq('user_id', userId)
                .gt('expires_at', new Date().toISOString())
                .order('created_at', { ascending: false })
                .limit(1)
                .single();

            console.log('üìä Busca pending_appointments:');
            console.log('  Data:', pending);
            console.log('  Error:', error);

            if (error || !pending) {
                console.log('‚ùå Nenhum agendamento pendente encontrado');
                return false;
            }

            console.log('‚úÖ Agendamento pendente encontrado!');

            // Verificar se texto parece ser sele√ß√£o (n√∫mero ou nome)
            const cleanText = text.trim().toLowerCase();
            console.log('üßπ Texto limpo:', cleanText);
            
            const isNumber = /^[1-9]$/.test(cleanText);
            console.log('üî¢ √â n√∫mero?', isNumber);
            
            const professionals = JSON.parse(pending.professionals);
            console.log('üë• Profissionais dispon√≠veis:', professionals.length);
            
            const isName = professionals.some(prof => 
                prof.name.toLowerCase().includes(cleanText) || 
                cleanText.includes(prof.name.toLowerCase())
            );
            console.log('üìù √â nome?', isName);

            const result = isNumber || isName;
            console.log('üéØ Resultado final isProfessionalSelection:', result);
            
            return result;
        } catch (error) {
            console.error('‚ùå Erro verificando sele√ß√£o:', error);
            return false;
        }
    }

    // üÜï 4. Processar sele√ß√£o do profissional
    async handleProfessionalSelection(text, contactId, userId) {
        try {
            // Buscar agendamento pendente
            const { data: pending, error } = await supabaseAdmin
                .from('pending_appointments')
                .select('*')
                .eq('contact_id', contactId)
                .eq('user_id', userId)
                .gt('expires_at', new Date().toISOString())
                .order('created_at', { ascending: false })
                .limit(1)
                .single();

            if (error || !pending) {
                return "‚ùå N√£o encontrei nenhum agendamento pendente. Por favor, solicite novamente.";
            }

            const professionals = JSON.parse(pending.professionals);
            const cleanText = text.trim().toLowerCase();
            let selectedProfessional = null;

            // Tentar encontrar por n√∫mero
            if (/^[1-9]$/.test(cleanText)) {
                const index = parseInt(cleanText) - 1;
                if (index >= 0 && index < professionals.length) {
                    selectedProfessional = professionals[index];
                }
            }

            // Se n√£o encontrou por n√∫mero, tentar por nome
            if (!selectedProfessional) {
                selectedProfessional = professionals.find(prof => 
                    prof.name.toLowerCase().includes(cleanText) || 
                    cleanText.includes(prof.name.toLowerCase())
                );
            }

            if (!selectedProfessional) {
                return `‚ùå N√£o consegui identificar o profissional "${text}". Por favor, responda com o n√∫mero (1, 2, 3...) ou nome completo.`;
            }

            // üÜï USAR A AN√ÅLISE ORIGINAL DO BANCO, N√ÉO A ATUAL!
            const originalAnalysis = JSON.parse(pending.analysis);
            
            console.log('üóìÔ∏è Processando agendamento com IA...');
            console.log('üìä An√°lise original:', originalAnalysis);
            console.log('üë§ Profissional selecionado:', selectedProfessional.name);

            const contact = await this.getContactById(contactId);
            const appointmentResult = await this.handleSchedulingIntent(originalAnalysis, contact, userId, selectedProfessional);

            // üßπ Limpar agendamento pendente
            await supabaseAdmin
                .from('pending_appointments')
                .delete()
                .eq('contact_id', contactId)
                .eq('user_id', userId);

            return appointmentResult;

        } catch (error) {
            console.error('‚ùå Erro processando sele√ß√£o:', error);
            return "‚ùå Erro processando sua escolha. Tente novamente.";
        }
    }

    // üÜï 1. Formatar lista de profissionais para o usu√°rio
    formatProfessionalsList(professionals) {
        if (!professionals || professionals.length === 0) {
            return "‚ùå Nenhum profissional dispon√≠vel no momento.";
        }

        let message = "üë®‚Äç‚öïÔ∏è *Profissionais dispon√≠veis:*\n\n";
        
        professionals.forEach((prof, index) => {
            const number = index + 1;
            const specialty = prof.specialty ? ` - ${prof.specialty}` : '';
            message += `${number}. *${prof.name}*${specialty}\n`;
        });
        
        message += "\nüì± *Responda com o n√∫mero ou nome do profissional de sua prefer√™ncia.*";
        
        return message;
    }

    // üÜï 5. Buscar contato por ID (helper)
    async getContactById(contactId) {
        try {
            const { data: contact, error } = await supabaseAdmin
                .from('contacts')
                .select('*')
                .eq('id', contactId)
                .single();

            if (error) throw error;
            return contact;
        } catch (error) {
            console.error('‚ùå Erro buscando contato:', error);
            throw error;
        }
    }

    // üÜï FUN√á√ÉO: Consultar agendamentos existentes
    async handleInquiryIntent(analysis, contact, userId) {
        try {
            console.log('üìã Consultando agendamentos do cliente...');

            // Buscar agendamentos futuros
            const { data: upcomingAppointments, error } = await supabaseAdmin
                .from('appointments')
                .select(`
                    id,
                    scheduled_at,
                    status,
                    title,
                    professionals(name, specialty)
                `)
                .eq('contact_id', contact.id)
                .gte('scheduled_at', new Date().toISOString())
                .order('scheduled_at', { ascending: true });

            if (error) {
                console.error('‚ùå Erro buscando agendamentos:', error);
                return "‚ùå Erro ao consultar seus agendamentos. Tente novamente.";
            }

            if (!upcomingAppointments || upcomingAppointments.length === 0) {
                return "üìÖ *Voc√™ n√£o tem consultas agendadas no momento.*\n\nüí¨ Gostaria de agendar uma nova consulta?";
            }

            let responseText = `üìÖ *Suas pr√≥ximas consultas:*\n\n`;

            upcomingAppointments.forEach((apt, index) => {
                const date = new Date(apt.scheduled_at);
                const dateStr = date.toLocaleDateString('pt-BR', { 
                    weekday: 'long', 
                    day: '2-digit', 
                    month: 'long' 
                });
                const timeStr = date.toLocaleTimeString('pt-BR', { 
                    hour: '2-digit', 
                    minute: '2-digit' 
                });
                const professional = apt.professionals?.name || 'Profissional n√£o especificado';
                const specialty = apt.professionals?.specialty || '';

                responseText += `${index + 1}. **${dateStr}** √†s **${timeStr}**\n`;
                responseText += `üë®‚Äç‚öïÔ∏è **${professional}**${specialty ? ` - ${specialty}` : ''}\n`;
                responseText += `üìã Status: ${apt.status}\n\n`;
            });

            responseText += `üí¨ *Precisa remarcar ou cancelar alguma consulta? √â s√≥ me falar!*`;

            return responseText;

        } catch (error) {
            console.error('‚ùå Erro na consulta de agendamentos:', error);
            return "‚ùå Erro ao consultar agendamentos. Tente novamente.";
        }
    }

    // üÜï FUN√á√ÉO: Remarca√ß√£o autom√°tica
    async handleReschedulingIntent(analysis, contact, userId) {
        try {
            console.log('üîÑ Processando remarca√ß√£o autom√°tica...');

            // 1. üîç BUSCAR AGENDAMENTOS FUTUROS DO CLIENTE
            const { data: appointments, error: appointmentsError } = await supabaseAdmin
                .from('appointments')
                .select(`
                    id,
                    scheduled_at,
                    status,
                    title,
                    google_event_id,
                    professionals(id, name, specialty, google_calendar_id, google_access_token, google_refresh_token)
                `)
                .eq('contact_id', contact.id)
                .gte('scheduled_at', new Date().toISOString())
                .eq('status', 'confirmed')
                .order('scheduled_at', { ascending: true });

            if (appointmentsError || !appointments || appointments.length === 0) {
                return "üìÖ *Voc√™ n√£o tem consultas confirmadas para remarcar.*\n\nüí¨ Gostaria de agendar uma nova consulta?";
            }

            // 2. üéØ IDENTIFICAR QUAL AGENDAMENTO REMARCAR
            let appointmentToReschedule = appointments[0]; // Por padr√£o, a pr√≥xima consulta

            // 3. üïê EXTRAIR NOVA DATA/HORA DA MENSAGEM
            const dateTimeInfo = analysis.extracted_info || {};
            const newDateTime = this.parseNewDateTime(analysis.message || '', dateTimeInfo);

            if (!newDateTime.isValid) {
                // Se n√£o especificou nova data/hora, perguntar
                const currentDate = new Date(appointmentToReschedule.scheduled_at);
                const currentDateStr = currentDate.toLocaleDateString('pt-BR', { 
                    weekday: 'long', 
                    day: '2-digit', 
                    month: 'long' 
                });
                const currentTimeStr = currentDate.toLocaleTimeString('pt-BR', { 
                    hour: '2-digit', 
                    minute: '2-digit' 
                });
                const professional = appointmentToReschedule.professionals?.name || 'N/A';

                return `üìÖ *Voc√™ tem consulta marcada para:*\n**${currentDateStr}** √†s **${currentTimeStr}**\nüë®‚Äç‚öïÔ∏è **${professional}**\n\nüí¨ *Para quando gostaria de remarcar?*\nEx: "Para segunda √†s 15h" ou "Para dia 15 √†s 10h"`;
            }

            // 4. üóëÔ∏è DELETAR EVENTO ANTIGO DO GOOGLE CALENDAR
            const professional = appointmentToReschedule.professionals;
            
            if (professional?.google_access_token && appointmentToReschedule.google_event_id) {
                try {
                    await this.deleteGoogleCalendarEvent(
                        professional.google_access_token, 
                        appointmentToReschedule.google_event_id
                    );
                    console.log('üóëÔ∏è Evento antigo deletado do Google Calendar');
                } catch (calendarError) {
                    console.error('‚ùå Erro deletando evento antigo:', calendarError);
                    // Continuar mesmo se n√£o conseguir deletar
                }
            }

            // 5. üìÖ CRIAR NOVO EVENTO NO GOOGLE CALENDAR
            let newEventId = null;
            if (professional?.google_access_token) {
                try {
                    const eventData = {
                        summary: appointmentToReschedule.title || `Consulta - ${contact.name}`,
                        start: {
                            dateTime: newDateTime.iso,
                            timeZone: 'America/Sao_Paulo'
                        },
                        end: {
                            dateTime: new Date(new Date(newDateTime.iso).getTime() + 60 * 60 * 1000).toISOString(),
                            timeZone: 'America/Sao_Paulo'
                        },
                        description: `Consulta remarcada - Cliente: ${contact.name}`
                    };

                    const response = await fetch(`https://www.googleapis.com/calendar/v3/calendars/primary/events`, {
                        method: 'POST',
                        headers: {
                            'Authorization': `Bearer ${professional.google_access_token}`,
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(eventData)
                    });

                    if (response.ok) {
                        const newEvent = await response.json();
                        newEventId = newEvent.id;
                        console.log('üìÖ Novo evento criado no Google Calendar:', newEventId);
                    }
                } catch (calendarError) {
                    console.error('‚ùå Erro criando novo evento:', calendarError);
                    // Continuar mesmo se n√£o conseguir criar evento
                }
            }

            // 6. üíæ ATUALIZAR NO BANCO DE DADOS
            const { error: updateError } = await supabaseAdmin
                .from('appointments')
                .update({
                    scheduled_at: newDateTime.iso,
                    google_event_id: newEventId,
                    updated_at: new Date().toISOString()
                })
                .eq('id', appointmentToReschedule.id);

            if (updateError) {
                console.error('‚ùå Erro atualizando agendamento:', updateError);
                return "‚ùå Erro ao salvar remarca√ß√£o. Tente novamente.";
            }

            // 7. ‚úÖ ENVIAR CONFIRMA√á√ÉO
            const newDateStr = newDateTime.date.toLocaleDateString('pt-BR', { 
                weekday: 'long', 
                day: '2-digit', 
                month: 'long' 
            });
            const newTimeStr = newDateTime.date.toLocaleTimeString('pt-BR', { 
                hour: '2-digit', 
                minute: '2-digit' 
            });

            return `‚úÖ *Consulta remarcada com sucesso!*

üë®‚Äç‚öïÔ∏è *Profissional:* ${professional?.name}
üìÖ *Nova data:* ${newDateStr}  
üïê *Novo hor√°rio:* ${newTimeStr}

üìù *O evento foi atualizado no Google Calendar.*

üí¨ *Alguma outra d√∫vida? Estou aqui para ajudar!*`;

        } catch (error) {
            console.error('‚ùå Erro na remarca√ß√£o:', error);
            return "‚ùå Erro ao remarcar. Tente novamente.";
        }
    }

    // üÜï FUN√á√ÉO: Cancelamento autom√°tico
    async handleCancellationIntent(analysis, contact, userId) {
        try {
            console.log('‚ùå Processando cancelamento autom√°tico...');

            // 1. üîç BUSCAR AGENDAMENTOS FUTUROS DO CLIENTE
            const { data: appointments, error: appointmentsError } = await supabaseAdmin
                .from('appointments')
                .select(`
                    id,
                    scheduled_at,
                    status,
                    title,
                    google_event_id,
                    professionals(id, name, specialty, google_access_token, google_refresh_token)
                `)
                .eq('contact_id', contact.id)
                .gte('scheduled_at', new Date().toISOString())
                .eq('status', 'confirmed')
                .order('scheduled_at', { ascending: true });

            if (appointmentsError || !appointments || appointments.length === 0) {
                return "üìÖ *Voc√™ n√£o tem consultas confirmadas para cancelar.*\n\nüí¨ Gostaria de agendar uma nova consulta?";
            }

            // 2. üéØ IDENTIFICAR QUAL AGENDAMENTO CANCELAR (pr√≥ximo por padr√£o)
            let appointmentToCancel = appointments[0];

            // 3. üóëÔ∏è DELETAR EVENTO DO GOOGLE CALENDAR
            const professional = appointmentToCancel.professionals;
            
            if (professional?.google_access_token && appointmentToCancel.google_event_id) {
                try {
                    await this.deleteGoogleCalendarEvent(
                        professional.google_access_token, 
                        appointmentToCancel.google_event_id
                    );
                    console.log('üóëÔ∏è Evento deletado do Google Calendar');
                } catch (calendarError) {
                    console.error('‚ùå Erro deletando evento:', calendarError);
                    // Continuar mesmo se n√£o conseguir deletar
                }
            }

            // 4. üíæ ATUALIZAR STATUS NO BANCO DE DADOS
            const { error: updateError } = await supabaseAdmin
                .from('appointments')
                .update({
                    status: 'cancelled',
                    updated_at: new Date().toISOString()
                })
                .eq('id', appointmentToCancel.id);

            if (updateError) {
                console.error('‚ùå Erro atualizando status:', updateError);
                return "‚ùå Erro ao cancelar. Tente novamente.";
            }

            // 5. ‚úÖ ENVIAR CONFIRMA√á√ÉO
            const date = new Date(appointmentToCancel.scheduled_at);
            const dateStr = date.toLocaleDateString('pt-BR', { 
                weekday: 'long', 
                day: '2-digit', 
                month: 'long' 
            });
            const timeStr = date.toLocaleTimeString('pt-BR', { 
                hour: '2-digit', 
                minute: '2-digit' 
            });

            return `‚úÖ *Consulta cancelada com sucesso!*

üìÖ *Consulta cancelada:* ${dateStr} √†s ${timeStr}
üë®‚Äç‚öïÔ∏è *Profissional:* ${professional?.name}

üìù *O evento foi removido do Google Calendar.*

üí¨ *Precisa agendar uma nova consulta? √â s√≥ me falar!*`;

        } catch (error) {
            console.error('‚ùå Erro no cancelamento:', error);
            return "‚ùå Erro ao cancelar. Tente novamente.";
        }
    }

    // üÜï FUN√á√ÉO: Deletar evento do Google Calendar
    async deleteGoogleCalendarEvent(accessToken, eventId) {
        try {
            const response = await fetch(`https://www.googleapis.com/calendar/v3/calendars/primary/events/${eventId}`, {
                method: 'DELETE',
                headers: {
                    'Authorization': `Bearer ${accessToken}`
                }
            });

            if (!response.ok) {
                throw new Error(`Google Calendar API error: ${response.status}`);
            }

            console.log('üóëÔ∏è Evento deletado do Google Calendar:', eventId);
            return true;
        } catch (error) {
            console.error('‚ùå Erro deletando evento:', error);
            throw error;
        }
    }

    // üÜï FUN√á√ÉO AUXILIAR: Parse de nova data/hora
    parseNewDateTime(message, extractedInfo) {
        try {
            // Implementa√ß√£o b√°sica - pode ser expandida
            const timeMatch = message.match(/(\d{1,2}):?(\d{0,2})\s?(h|hs|horas?)?/i);
            const dayMatch = message.match(/(segunda|ter√ßa|quarta|quinta|sexta|s√°bado|domingo|seg|ter|qua|qui|sex|s√°b|dom)/i);
            
            if (!timeMatch) {
                return { isValid: false };
            }

            const hour = parseInt(timeMatch[1]);
            const minute = timeMatch[2] ? parseInt(timeMatch[2]) : 0;
            
            // Criar data para pr√≥xima ocorr√™ncia do dia especificado
            let targetDate = new Date();
            
            if (dayMatch) {
                const dayNames = {
                    'segunda': 1, 'seg': 1,
                    'ter√ßa': 2, 'ter': 2,
                    'quarta': 3, 'qua': 3,
                    'quinta': 4, 'qui': 4,
                    'sexta': 5, 'sex': 5,
                    's√°bado': 6, 's√°b': 6,
                    'domingo': 0, 'dom': 0
                };
                
                const targetDay = dayNames[dayMatch[1].toLowerCase()];
                const today = targetDate.getDay();
                const daysUntilTarget = (targetDay - today + 7) % 7 || 7;
                
                targetDate.setDate(targetDate.getDate() + daysUntilTarget);
            } else {
                // Se n√£o especificou dia, assumir pr√≥ximo dia √∫til
                targetDate.setDate(targetDate.getDate() + 1);
            }
            
            targetDate.setHours(hour, minute, 0, 0);
            
            return {
                isValid: true,
                date: targetDate,
                iso: targetDate.toISOString()
            };
            
        } catch (error) {
            console.error('‚ùå Erro parseando data/hora:', error);
            return { isValid: false };
        }
    }

    async showProductOptions(products, contact, userId, analysis) {
        let message = `‚úÖ *√ìtima escolha!* Encontrei ${products.length} servi√ßos relacionados:\n\n`;
        products.forEach((product, index) => {
          message += `*${index + 1}.* ${product.name}\n`;
          if (product.professionals) {
            message += `   üë®‚Äç‚öïÔ∏è Com: ${product.professionals.name}\n`;
          }
          if (product.price) {
            message += `   üí∞ Valor: R$ ${product.price}\n\n`;
          }
        });
        message += `Digite o *n√∫mero* do servi√ßo que voc√™ deseja agendar (1 a ${products.length}):`;
        
        // Salvar estado da sele√ß√£o de produto pendente
        await this.savePendingProductSelection(contact.id, userId, products, analysis);
        
        return message;
    }

    async processDirectScheduling(product, contact, userId, analysis) {
        const professional = product.professionals;
        // Reutiliza a fun√ß√£o de agendamento que j√° existe, passando o profissional do produto
        return await this.handleSchedulingIntent(analysis, contact, userId, professional);
    }

    // ‚úÖ VERS√ÉO FINAL: Salva o estado da sele√ß√£o de produto pendente no banco de dados.
    async savePendingProductSelection(contactId, userId, products, analysis) {
        try {
            console.log('üíæ Salvando sele√ß√£o de produto pendente no banco de dados...');
            
            const { error } = await supabaseAdmin
                .from('pending_interactions')
                .upsert({
                    contact_id: contactId,
                    user_id: userId,
                    type: 'product_selection',
                    data: {
                        products: products,
                        original_analysis: analysis,
                        expires_at: new Date(Date.now() + 10 * 60 * 1000).toISOString()
                    },
                    expires_at: new Date(Date.now() + 10 * 60 * 1000).toISOString()
                }, { onConflict: 'contact_id, user_id, type' });

            if (error) {
                throw error;
            }
            
            console.log('‚úÖ Estado de sele√ß√£o pendente salvo com sucesso.');

        } catch (error) {
            console.error('‚ùå Erro ao salvar estado de sele√ß√£o pendente:', error);
        }
    }

    // ‚úÖ VERS√ÉO FINAL: Verifica no DB se existe uma sele√ß√£o de produto pendente.
    async checkPendingProductSelection(contactId, userId) {
        try {
            const { data, error } = await supabaseAdmin
                .from('pending_interactions')
                .select('*')
                .eq('contact_id', contactId)
                .eq('user_id', userId)
                .eq('type', 'product_selection')
                .gt('expires_at', new Date().toISOString())
                .single();

            if (error && error.code !== 'PGRST116') {
                throw error;
            }

            return data;

        } catch (error) {
            console.error('‚ùå Erro em checkPendingProductSelection:', error);
            return null;
        }
    }

    // Uma fun√ß√£o simples para verificar se o texto √© apenas um n√∫mero.
    isNumericSelection(text) {
        return /^\d+$/.test(text.trim());
    }

    // Processa a escolha num√©rica do usu√°rio, agenda e limpa o estado pendente.
    async handleProductSelection(text, pendingSelection, contact, userId) {
        try {
            const selectedIndex = parseInt(text.trim()) - 1;
            const products = pendingSelection.data.products;

            if (selectedIndex < 0 || selectedIndex >= products.length) {
                return `‚ùå Op√ß√£o inv√°lida. Por favor, digite um n√∫mero de 1 a ${products.length}.`;
            }

            const selectedProduct = products[selectedIndex];

            console.log(`‚úÖ Cliente selecionou o produto: "${selectedProduct.name}"`);

            // Reutiliza a fun√ß√£o de agendamento direto com o produto selecionado
            return await this.processDirectScheduling(selectedProduct, contact, userId, pendingSelection.data.original_analysis);
        } catch (error) {
            console.error('‚ùå Erro ao processar sele√ß√£o de produto:', error);
            return '‚ùå Ocorreu um erro ao processar sua sele√ß√£o. Tente novamente.';
        }
    }

    // üí¨ RESPOSTA GERAL (n√£o √© agendamento)
    async handleGeneralResponse(analysis, originalText) {
        const responses = {
            greeting: "Ol√°! üòä Como posso ajudar voc√™ hoje? \n\nPosso ajudar com:\n‚Ä¢ Agendamentos\n‚Ä¢ Informa√ß√µes sobre servi√ßos\n‚Ä¢ Reagendamentos",
            information: "Estou aqui para ajudar! Sobre o que voc√™ gostaria de saber?",
            pricing: "Para informa√ß√µes sobre valores, entre em contato conosco! Temos v√°rias op√ß√µes de tratamento.",
            support: "Estou aqui para ajudar! Qual √© sua d√∫vida?"
        };
        
        return responses[analysis.intention] || "Obrigado pela mensagem! Como posso ajudar voc√™? üòä";
    }
}

module.exports = TelegramProcessor;

