// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  phone     String?  @unique
  role      UserRole @default(AGENT)
  companyId String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relacionamentos
  company       Company?      @relation(fields: [companyId], references: [id])
  profile       UserProfile?
  conversations Conversation[]
  
  @@map("users")
}

model Contact {
  id          String   @id @default(cuid())
  name        String?
  phone       String   @unique
  email       String?
  tags        String[]
  notes       String?
  isBlocked   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relacionamentos
  conversations Conversation[]
  
  @@map("contacts")
}

model Conversation {
  id            String   @id @default(cuid())
  contactId     String
  userId        String?
  lastMessageAt DateTime @default(now())
  isActive      Boolean  @default(true)
  aiEnabled     Boolean  @default(true)
  status        String   @default("open") // open, closed, archived
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relacionamentos
  contact  Contact   @relation(fields: [contactId], references: [id])
  user     User?     @relation(fields: [userId], references: [id])
  messages Message[]
  
  @@map("conversations")
}

model Message {
  id             String   @id @default(cuid())
  conversationId String
  content        String
  messageType    String   // text, image, audio, document
  direction      String   // incoming, outgoing
  fromAI         Boolean  @default(false)
  metadata       Json?    // WhatsApp metadata, media URLs, etc.
  timestamp      DateTime @default(now())
  createdAt      DateTime @default(now())
  
  // Relacionamentos
  conversation Conversation @relation(fields: [conversationId], references: [id])
  
  @@map("messages")
}

model Calendar {
  id          String    @id @default(cuid())
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  contactId   String?
  userId      String?
  status      String    @default("scheduled") // scheduled, confirmed, cancelled
  googleEventId String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@map("calendar_events")
}

model AIInteraction {
  id             String   @id @default(cuid())
  conversationId String?
  prompt         String
  response       String
  model          String   // gpt-4, claude, etc.
  tokens         Int?
  cost           Float?
  intent         String?  // agendamento, vendas, suporte, etc.
  confidence     Float?
  createdAt      DateTime @default(now())
  
  @@map("ai_interactions")
}

model Company {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  industry    String?
  size        CompanySize?
  website     String?
  phone       String?
  email       String?
  address     String?
  city        String?
  state       String?
  country     String   @default("Brasil")
  zipCode     String?
  logoUrl     String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relacionamentos
  users       User[]
  settings    CompanySettings?
  
  @@map("companies")
}

model CompanySettings {
  id                String   @id @default(cuid())
  companyId         String   @unique
  businessHours     Json?    // Horários de funcionamento
  timeZone          String   @default("America/Sao_Paulo")
  language          String   @default("pt-BR")
  currency          String   @default("BRL")
  autoReply         Boolean  @default(true)
  autoReplyMessage  String?
  aiEnabled         Boolean  @default(true)
  webhookUrl        String?
  integrations      Json?    // Configurações de integrações
  notifications     Json?    // Configurações de notificações
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relacionamentos
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  
  @@map("company_settings")
}

model UserProfile {
  id          String    @id @default(cuid())
  userId      String    @unique
  firstName   String?
  lastName    String?
  avatar      String?
  bio         String?
  department  String?
  position    String?
  phoneWork   String?
  birthday    DateTime?
  preferences Json?     // Preferências do usuário
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relacionamentos
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_profiles")
}

enum CompanySize {
  INDIVIDUAL
  SMALL       // 1-10 funcionários
  MEDIUM      // 11-50 funcionários
  LARGE       // 51-200 funcionários
  ENTERPRISE  // 200+ funcionários
}

enum UserRole {
  OWNER       // Dono da empresa
  ADMIN       // Administrador
  MANAGER     // Gerente
  AGENT       // Atendente
  VIEWER      // Apenas visualização
}
